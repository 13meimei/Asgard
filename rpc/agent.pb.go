// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AgentInfo struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentInfo) Reset()         { *m = AgentInfo{} }
func (m *AgentInfo) String() string { return proto.CompactTextString(m) }
func (*AgentInfo) ProtoMessage()    {}
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{0}
}

func (m *AgentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentInfo.Unmarshal(m, b)
}
func (m *AgentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentInfo.Marshal(b, m, deterministic)
}
func (m *AgentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInfo.Merge(m, src)
}
func (m *AgentInfo) XXX_Size() int {
	return xxx_messageInfo_AgentInfo.Size(m)
}
func (m *AgentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInfo proto.InternalMessageInfo

func (m *AgentInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AgentInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type AgentStat struct {
	Apps                 int64    `protobuf:"varint,1,opt,name=apps,proto3" json:"apps,omitempty"`
	Jobs                 int64    `protobuf:"varint,2,opt,name=jobs,proto3" json:"jobs,omitempty"`
	Timings              int64    `protobuf:"varint,3,opt,name=timings,proto3" json:"timings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AgentStat) Reset()         { *m = AgentStat{} }
func (m *AgentStat) String() string { return proto.CompactTextString(m) }
func (*AgentStat) ProtoMessage()    {}
func (*AgentStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{1}
}

func (m *AgentStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentStat.Unmarshal(m, b)
}
func (m *AgentStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentStat.Marshal(b, m, deterministic)
}
func (m *AgentStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStat.Merge(m, src)
}
func (m *AgentStat) XXX_Size() int {
	return xxx_messageInfo_AgentStat.Size(m)
}
func (m *AgentStat) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStat.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStat proto.InternalMessageInfo

func (m *AgentStat) GetApps() int64 {
	if m != nil {
		return m.Apps
	}
	return 0
}

func (m *AgentStat) GetJobs() int64 {
	if m != nil {
		return m.Jobs
	}
	return 0
}

func (m *AgentStat) GetTimings() int64 {
	if m != nil {
		return m.Timings
	}
	return 0
}

type AgentStatResponse struct {
	Code                 int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	AgentStat            *AgentStat `protobuf:"bytes,2,opt,name=agentStat,proto3" json:"agentStat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AgentStatResponse) Reset()         { *m = AgentStatResponse{} }
func (m *AgentStatResponse) String() string { return proto.CompactTextString(m) }
func (*AgentStatResponse) ProtoMessage()    {}
func (*AgentStatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{2}
}

func (m *AgentStatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentStatResponse.Unmarshal(m, b)
}
func (m *AgentStatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentStatResponse.Marshal(b, m, deterministic)
}
func (m *AgentStatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentStatResponse.Merge(m, src)
}
func (m *AgentStatResponse) XXX_Size() int {
	return xxx_messageInfo_AgentStatResponse.Size(m)
}
func (m *AgentStatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentStatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AgentStatResponse proto.InternalMessageInfo

func (m *AgentStatResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AgentStatResponse) GetAgentStat() *AgentStat {
	if m != nil {
		return m.AgentStat
	}
	return nil
}

type LogRuquest struct {
	Dir                  string   `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	Lines                int64    `protobuf:"varint,2,opt,name=lines,proto3" json:"lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRuquest) Reset()         { *m = LogRuquest{} }
func (m *LogRuquest) String() string { return proto.CompactTextString(m) }
func (*LogRuquest) ProtoMessage()    {}
func (*LogRuquest) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{3}
}

func (m *LogRuquest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRuquest.Unmarshal(m, b)
}
func (m *LogRuquest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRuquest.Marshal(b, m, deterministic)
}
func (m *LogRuquest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRuquest.Merge(m, src)
}
func (m *LogRuquest) XXX_Size() int {
	return xxx_messageInfo_LogRuquest.Size(m)
}
func (m *LogRuquest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRuquest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRuquest proto.InternalMessageInfo

func (m *LogRuquest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *LogRuquest) GetLines() int64 {
	if m != nil {
		return m.Lines
	}
	return 0
}

type LogResponse struct {
	Content              [][]byte `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_56ede974c0020f77, []int{4}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetContent() [][]byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*AgentInfo)(nil), "AgentInfo")
	proto.RegisterType((*AgentStat)(nil), "AgentStat")
	proto.RegisterType((*AgentStatResponse)(nil), "AgentStatResponse")
	proto.RegisterType((*LogRuquest)(nil), "LogRuquest")
	proto.RegisterType((*LogResponse)(nil), "LogResponse")
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor_56ede974c0020f77) }

var fileDescriptor_56ede974c0020f77 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xdb, 0x38, 0x89, 0xe5, 0x89, 0x05, 0x65, 0xe1, 0x60, 0x19, 0x05, 0x15, 0xd3, 0x8a,
	0x48, 0x48, 0x8b, 0x54, 0x78, 0x01, 0x23, 0x10, 0xaa, 0x15, 0x0e, 0x18, 0xb8, 0x70, 0xf3, 0xc6,
	0x4b, 0xe4, 0x8a, 0x78, 0x86, 0x78, 0x8b, 0xc4, 0x6b, 0xf2, 0x44, 0x68, 0xc7, 0xeb, 0xd8, 0x26,
	0xed, 0x6d, 0xe6, 0xff, 0xff, 0x99, 0xf9, 0x36, 0x8a, 0x61, 0x51, 0x6c, 0x75, 0x6d, 0x24, 0xed,
	0xd1, 0x60, 0x0c, 0xaa, 0x68, 0xb4, 0xab, 0x83, 0x82, 0xa8, 0x2b, 0x6f, 0x50, 0xb9, 0x32, 0x34,
	0xd5, 0xae, 0xaa, 0xb7, 0x6d, 0x97, 0xbc, 0x86, 0x20, 0xb5, 0xe3, 0xd7, 0xf5, 0x0f, 0x14, 0x0f,
	0x60, 0x52, 0x51, 0x74, 0x7a, 0x7e, 0xba, 0x0a, 0xf2, 0x49, 0x45, 0x42, 0xc0, 0x94, 0x70, 0x6f,
	0xa2, 0x09, 0x2b, 0x5c, 0x27, 0x9f, 0xdc, 0xc0, 0x17, 0x53, 0x18, 0x1b, 0x28, 0x88, 0x1a, 0x1e,
	0xf1, 0x72, 0xae, 0xad, 0x76, 0x83, 0xaa, 0xe1, 0x21, 0x2f, 0xe7, 0x5a, 0x44, 0xe0, 0xb7, 0x57,
	0x9b, 0xc8, 0x63, 0xb9, 0x6b, 0x93, 0xcf, 0xf0, 0xe8, 0xb0, 0x2e, 0xd7, 0x0d, 0x61, 0xdd, 0x68,
	0xbb, 0x62, 0x83, 0xa5, 0xe6, 0xb5, 0xb3, 0x9c, 0x6b, 0xb1, 0x82, 0xa0, 0xe8, 0x82, 0xbc, 0x7b,
	0x71, 0x05, 0xb2, 0x1f, 0xed, 0xcd, 0xe4, 0x2d, 0xc0, 0x1a, 0xb7, 0xf9, 0xed, 0xaf, 0x5b, 0xdd,
	0x18, 0x71, 0x06, 0x5e, 0x59, 0xed, 0xdd, 0xa3, 0x6c, 0x29, 0x9e, 0xc0, 0xec, 0x67, 0x55, 0xeb,
	0x8e, 0xb0, 0x6d, 0x92, 0x97, 0xb0, 0xb0, 0x53, 0x1d, 0x42, 0x04, 0xfe, 0x06, 0x6b, 0xa3, 0x6b,
	0x7b, 0xcc, 0x5b, 0x85, 0x79, 0xd7, 0x5e, 0xfd, 0x9d, 0xc2, 0x8c, 0xef, 0x8a, 0x0b, 0x98, 0xf2,
	0xaf, 0x30, 0x97, 0x1f, 0x76, 0x64, 0xfe, 0xc4, 0x42, 0x1e, 0x3d, 0x25, 0x39, 0x11, 0x09, 0x78,
	0x6b, 0xdc, 0x8a, 0x85, 0xec, 0xa1, 0xe2, 0x50, 0x0e, 0x6e, 0x25, 0x27, 0xe2, 0x12, 0xfc, 0x94,
	0x68, 0x5d, 0x35, 0xfd, 0xb2, 0x33, 0xe9, 0x94, 0x41, 0x6c, 0x09, 0xf3, 0x94, 0xe8, 0xa3, 0x36,
	0xc2, 0x93, 0xd7, 0xef, 0xe3, 0xd0, 0x46, 0x06, 0xf6, 0x53, 0xb6, 0xd3, 0xb2, 0x14, 0x53, 0xeb,
	0xc4, 0x81, 0x1c, 0x98, 0xcf, 0x20, 0x48, 0x89, 0xbe, 0x51, 0x59, 0x18, 0x7d, 0x97, 0xbf, 0x64,
	0x3f, 0xd7, 0x3b, 0xfc, 0xad, 0xdb, 0xf5, 0x23, 0xfb, 0x12, 0xfc, 0x0c, 0xd5, 0x7f, 0x84, 0x4e,
	0x19, 0x13, 0x66, 0xa8, 0x06, 0x84, 0x19, 0xaa, 0x31, 0x61, 0x86, 0xaa, 0x25, 0xcc, 0x50, 0x1d,
	0x11, 0x66, 0xa8, 0x0e, 0x84, 0x47, 0xfe, 0x92, 0xfd, 0x7b, 0x09, 0x5f, 0x01, 0x7c, 0xe5, 0x3f,
	0xd5, 0x08, 0xf2, 0xb1, 0xec, 0xc5, 0x41, 0xf8, 0x05, 0x04, 0xad, 0x7e, 0x40, 0x7d, 0xe8, 0x82,
	0x83, 0xd0, 0xf3, 0x2e, 0x64, 0x81, 0x7d, 0xe7, 0x8f, 0x8f, 0x5e, 0x40, 0xd8, 0xca, 0x0e, 0xfb,
	0xee, 0xd4, 0x79, 0x97, 0xba, 0x0f, 0xfe, 0xdd, 0xec, 0xbb, 0xb7, 0xa7, 0x8d, 0x9a, 0xf3, 0x47,
	0xf9, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x88, 0x98, 0xc4, 0xd3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AgentStatResponse, error)
	Log(ctx context.Context, in *LogRuquest, opts ...grpc.CallOption) (*LogResponse, error)
	AppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppListResponse, error)
	AppGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppResponse, error)
	AppAdd(ctx context.Context, in *App, opts ...grpc.CallOption) (*Response, error)
	AppUpdate(ctx context.Context, in *App, opts ...grpc.CallOption) (*Response, error)
	AppRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error)
	JobList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobListResponse, error)
	JobGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*JobResponse, error)
	JobAdd(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
	JobUpdate(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
	JobRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error)
	TimingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimingListResponse, error)
	TimingGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TimingResponse, error)
	TimingAdd(ctx context.Context, in *Timing, opts ...grpc.CallOption) (*Response, error)
	TimingUpdate(ctx context.Context, in *Timing, opts ...grpc.CallOption) (*Response, error)
	TimingRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AgentStatResponse, error) {
	out := new(AgentStatResponse)
	err := c.cc.Invoke(ctx, "/Agent/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Log(ctx context.Context, in *LogRuquest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/Agent/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, "/Agent/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AppGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/Agent/AppGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AppAdd(ctx context.Context, in *App, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/AppAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AppUpdate(ctx context.Context, in *App, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/AppUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AppRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/AppRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) JobList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, "/Agent/JobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) JobGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/Agent/JobGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) JobAdd(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/JobAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) JobUpdate(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/JobUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) JobRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/JobRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TimingList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TimingListResponse, error) {
	out := new(TimingListResponse)
	err := c.cc.Invoke(ctx, "/Agent/TimingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TimingGet(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TimingResponse, error) {
	out := new(TimingResponse)
	err := c.cc.Invoke(ctx, "/Agent/TimingGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TimingAdd(ctx context.Context, in *Timing, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/TimingAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TimingUpdate(ctx context.Context, in *Timing, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/TimingUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) TimingRemove(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Agent/TimingRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	Stat(context.Context, *Empty) (*AgentStatResponse, error)
	Log(context.Context, *LogRuquest) (*LogResponse, error)
	AppList(context.Context, *Empty) (*AppListResponse, error)
	AppGet(context.Context, *ID) (*AppResponse, error)
	AppAdd(context.Context, *App) (*Response, error)
	AppUpdate(context.Context, *App) (*Response, error)
	AppRemove(context.Context, *ID) (*Response, error)
	JobList(context.Context, *Empty) (*JobListResponse, error)
	JobGet(context.Context, *ID) (*JobResponse, error)
	JobAdd(context.Context, *Job) (*Response, error)
	JobUpdate(context.Context, *Job) (*Response, error)
	JobRemove(context.Context, *ID) (*Response, error)
	TimingList(context.Context, *Empty) (*TimingListResponse, error)
	TimingGet(context.Context, *ID) (*TimingResponse, error)
	TimingAdd(context.Context, *Timing) (*Response, error)
	TimingUpdate(context.Context, *Timing) (*Response, error)
	TimingRemove(context.Context, *ID) (*Response, error)
}

// UnimplementedAgentServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (*UnimplementedAgentServer) Stat(ctx context.Context, req *Empty) (*AgentStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedAgentServer) Log(ctx context.Context, req *LogRuquest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedAgentServer) AppList(ctx context.Context, req *Empty) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (*UnimplementedAgentServer) AppGet(ctx context.Context, req *ID) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGet not implemented")
}
func (*UnimplementedAgentServer) AppAdd(ctx context.Context, req *App) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAdd not implemented")
}
func (*UnimplementedAgentServer) AppUpdate(ctx context.Context, req *App) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppUpdate not implemented")
}
func (*UnimplementedAgentServer) AppRemove(ctx context.Context, req *ID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRemove not implemented")
}
func (*UnimplementedAgentServer) JobList(ctx context.Context, req *Empty) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobList not implemented")
}
func (*UnimplementedAgentServer) JobGet(ctx context.Context, req *ID) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobGet not implemented")
}
func (*UnimplementedAgentServer) JobAdd(ctx context.Context, req *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobAdd not implemented")
}
func (*UnimplementedAgentServer) JobUpdate(ctx context.Context, req *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobUpdate not implemented")
}
func (*UnimplementedAgentServer) JobRemove(ctx context.Context, req *ID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobRemove not implemented")
}
func (*UnimplementedAgentServer) TimingList(ctx context.Context, req *Empty) (*TimingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingList not implemented")
}
func (*UnimplementedAgentServer) TimingGet(ctx context.Context, req *ID) (*TimingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingGet not implemented")
}
func (*UnimplementedAgentServer) TimingAdd(ctx context.Context, req *Timing) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingAdd not implemented")
}
func (*UnimplementedAgentServer) TimingUpdate(ctx context.Context, req *Timing) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingUpdate not implemented")
}
func (*UnimplementedAgentServer) TimingRemove(ctx context.Context, req *ID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingRemove not implemented")
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Stat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRuquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Log(ctx, req.(*LogRuquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AppGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AppGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/AppGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AppGet(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AppAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AppAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/AppAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AppAdd(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/AppUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AppUpdate(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AppRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AppRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/AppRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AppRemove(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/JobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).JobList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_JobGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).JobGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/JobGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).JobGet(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_JobAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).JobAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/JobAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).JobAdd(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_JobUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).JobUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/JobUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).JobUpdate(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_JobRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).JobRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/JobRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).JobRemove(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TimingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TimingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/TimingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TimingList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TimingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TimingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/TimingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TimingGet(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TimingAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TimingAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/TimingAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TimingAdd(ctx, req.(*Timing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TimingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TimingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/TimingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TimingUpdate(ctx, req.(*Timing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_TimingRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).TimingRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Agent/TimingRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).TimingRemove(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _Agent_Stat_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Agent_Log_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _Agent_AppList_Handler,
		},
		{
			MethodName: "AppGet",
			Handler:    _Agent_AppGet_Handler,
		},
		{
			MethodName: "AppAdd",
			Handler:    _Agent_AppAdd_Handler,
		},
		{
			MethodName: "AppUpdate",
			Handler:    _Agent_AppUpdate_Handler,
		},
		{
			MethodName: "AppRemove",
			Handler:    _Agent_AppRemove_Handler,
		},
		{
			MethodName: "JobList",
			Handler:    _Agent_JobList_Handler,
		},
		{
			MethodName: "JobGet",
			Handler:    _Agent_JobGet_Handler,
		},
		{
			MethodName: "JobAdd",
			Handler:    _Agent_JobAdd_Handler,
		},
		{
			MethodName: "JobUpdate",
			Handler:    _Agent_JobUpdate_Handler,
		},
		{
			MethodName: "JobRemove",
			Handler:    _Agent_JobRemove_Handler,
		},
		{
			MethodName: "TimingList",
			Handler:    _Agent_TimingList_Handler,
		},
		{
			MethodName: "TimingGet",
			Handler:    _Agent_TimingGet_Handler,
		},
		{
			MethodName: "TimingAdd",
			Handler:    _Agent_TimingAdd_Handler,
		},
		{
			MethodName: "TimingUpdate",
			Handler:    _Agent_TimingUpdate_Handler,
		},
		{
			MethodName: "TimingRemove",
			Handler:    _Agent_TimingRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
