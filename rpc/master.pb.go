// Code generated by protoc-gen-go. DO NOT EDIT.
// source: master.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Monitor struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Pid                  int32    `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Cpu                  float32  `protobuf:"fixed32,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               float32  `protobuf:"fixed32,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Threads              int32    `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Monitor) Reset()         { *m = Monitor{} }
func (m *Monitor) String() string { return proto.CompactTextString(m) }
func (*Monitor) ProtoMessage()    {}
func (*Monitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{0}
}

func (m *Monitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Monitor.Unmarshal(m, b)
}
func (m *Monitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Monitor.Marshal(b, m, deterministic)
}
func (m *Monitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monitor.Merge(m, src)
}
func (m *Monitor) XXX_Size() int {
	return xxx_messageInfo_Monitor.Size(m)
}
func (m *Monitor) XXX_DiscardUnknown() {
	xxx_messageInfo_Monitor.DiscardUnknown(m)
}

var xxx_messageInfo_Monitor proto.InternalMessageInfo

func (m *Monitor) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Monitor) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Monitor) GetCpu() float32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *Monitor) GetMemory() float32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Monitor) GetThreads() int32 {
	if m != nil {
		return m.Threads
	}
	return 0
}

type Archive struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Pid                  int32    `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	BeginTime            int64    `protobuf:"varint,3,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime              int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Signal               string   `protobuf:"bytes,6,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Archive) Reset()         { *m = Archive{} }
func (m *Archive) String() string { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()    {}
func (*Archive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{1}
}

func (m *Archive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Archive.Unmarshal(m, b)
}
func (m *Archive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Archive.Marshal(b, m, deterministic)
}
func (m *Archive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archive.Merge(m, src)
}
func (m *Archive) XXX_Size() int {
	return xxx_messageInfo_Archive.Size(m)
}
func (m *Archive) XXX_DiscardUnknown() {
	xxx_messageInfo_Archive.DiscardUnknown(m)
}

var xxx_messageInfo_Archive proto.InternalMessageInfo

func (m *Archive) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Archive) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Archive) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *Archive) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Archive) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Archive) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

type AgentMonitor struct {
	Agent                *AgentInfo `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Monitor              *Monitor   `protobuf:"bytes,2,opt,name=monitor,proto3" json:"monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AgentMonitor) Reset()         { *m = AgentMonitor{} }
func (m *AgentMonitor) String() string { return proto.CompactTextString(m) }
func (*AgentMonitor) ProtoMessage()    {}
func (*AgentMonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{2}
}

func (m *AgentMonitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentMonitor.Unmarshal(m, b)
}
func (m *AgentMonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentMonitor.Marshal(b, m, deterministic)
}
func (m *AgentMonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMonitor.Merge(m, src)
}
func (m *AgentMonitor) XXX_Size() int {
	return xxx_messageInfo_AgentMonitor.Size(m)
}
func (m *AgentMonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMonitor.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMonitor proto.InternalMessageInfo

func (m *AgentMonitor) GetAgent() *AgentInfo {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *AgentMonitor) GetMonitor() *Monitor {
	if m != nil {
		return m.Monitor
	}
	return nil
}

type AgentMonitorList struct {
	Agent                *AgentInfo `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Monitors             []*Monitor `protobuf:"bytes,2,rep,name=monitors,proto3" json:"monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AgentMonitorList) Reset()         { *m = AgentMonitorList{} }
func (m *AgentMonitorList) String() string { return proto.CompactTextString(m) }
func (*AgentMonitorList) ProtoMessage()    {}
func (*AgentMonitorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{3}
}

func (m *AgentMonitorList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AgentMonitorList.Unmarshal(m, b)
}
func (m *AgentMonitorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AgentMonitorList.Marshal(b, m, deterministic)
}
func (m *AgentMonitorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentMonitorList.Merge(m, src)
}
func (m *AgentMonitorList) XXX_Size() int {
	return xxx_messageInfo_AgentMonitorList.Size(m)
}
func (m *AgentMonitorList) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentMonitorList.DiscardUnknown(m)
}

var xxx_messageInfo_AgentMonitorList proto.InternalMessageInfo

func (m *AgentMonitorList) GetAgent() *AgentInfo {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *AgentMonitorList) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type AppMonitor struct {
	AppId                int64    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Monitor              *Monitor `protobuf:"bytes,2,opt,name=monitor,proto3" json:"monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMonitor) Reset()         { *m = AppMonitor{} }
func (m *AppMonitor) String() string { return proto.CompactTextString(m) }
func (*AppMonitor) ProtoMessage()    {}
func (*AppMonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{4}
}

func (m *AppMonitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppMonitor.Unmarshal(m, b)
}
func (m *AppMonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppMonitor.Marshal(b, m, deterministic)
}
func (m *AppMonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMonitor.Merge(m, src)
}
func (m *AppMonitor) XXX_Size() int {
	return xxx_messageInfo_AppMonitor.Size(m)
}
func (m *AppMonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMonitor.DiscardUnknown(m)
}

var xxx_messageInfo_AppMonitor proto.InternalMessageInfo

func (m *AppMonitor) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppMonitor) GetMonitor() *Monitor {
	if m != nil {
		return m.Monitor
	}
	return nil
}

type AppMonitorList struct {
	AppId                int64      `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Monitors             []*Monitor `protobuf:"bytes,2,rep,name=monitors,proto3" json:"monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AppMonitorList) Reset()         { *m = AppMonitorList{} }
func (m *AppMonitorList) String() string { return proto.CompactTextString(m) }
func (*AppMonitorList) ProtoMessage()    {}
func (*AppMonitorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{5}
}

func (m *AppMonitorList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppMonitorList.Unmarshal(m, b)
}
func (m *AppMonitorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppMonitorList.Marshal(b, m, deterministic)
}
func (m *AppMonitorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMonitorList.Merge(m, src)
}
func (m *AppMonitorList) XXX_Size() int {
	return xxx_messageInfo_AppMonitorList.Size(m)
}
func (m *AppMonitorList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMonitorList.DiscardUnknown(m)
}

var xxx_messageInfo_AppMonitorList proto.InternalMessageInfo

func (m *AppMonitorList) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppMonitorList) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type AppException struct {
	AppId                int64    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppException) Reset()         { *m = AppException{} }
func (m *AppException) String() string { return proto.CompactTextString(m) }
func (*AppException) ProtoMessage()    {}
func (*AppException) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{6}
}

func (m *AppException) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppException.Unmarshal(m, b)
}
func (m *AppException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppException.Marshal(b, m, deterministic)
}
func (m *AppException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppException.Merge(m, src)
}
func (m *AppException) XXX_Size() int {
	return xxx_messageInfo_AppException.Size(m)
}
func (m *AppException) XXX_DiscardUnknown() {
	xxx_messageInfo_AppException.DiscardUnknown(m)
}

var xxx_messageInfo_AppException proto.InternalMessageInfo

func (m *AppException) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppException) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type JobMonior struct {
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Monitor              *Monitor `protobuf:"bytes,2,opt,name=monitor,proto3" json:"monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobMonior) Reset()         { *m = JobMonior{} }
func (m *JobMonior) String() string { return proto.CompactTextString(m) }
func (*JobMonior) ProtoMessage()    {}
func (*JobMonior) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{7}
}

func (m *JobMonior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobMonior.Unmarshal(m, b)
}
func (m *JobMonior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobMonior.Marshal(b, m, deterministic)
}
func (m *JobMonior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobMonior.Merge(m, src)
}
func (m *JobMonior) XXX_Size() int {
	return xxx_messageInfo_JobMonior.Size(m)
}
func (m *JobMonior) XXX_DiscardUnknown() {
	xxx_messageInfo_JobMonior.DiscardUnknown(m)
}

var xxx_messageInfo_JobMonior proto.InternalMessageInfo

func (m *JobMonior) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *JobMonior) GetMonitor() *Monitor {
	if m != nil {
		return m.Monitor
	}
	return nil
}

type JobMonitorList struct {
	JobId                int64      `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Monitors             []*Monitor `protobuf:"bytes,2,rep,name=monitors,proto3" json:"monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *JobMonitorList) Reset()         { *m = JobMonitorList{} }
func (m *JobMonitorList) String() string { return proto.CompactTextString(m) }
func (*JobMonitorList) ProtoMessage()    {}
func (*JobMonitorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{8}
}

func (m *JobMonitorList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobMonitorList.Unmarshal(m, b)
}
func (m *JobMonitorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobMonitorList.Marshal(b, m, deterministic)
}
func (m *JobMonitorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobMonitorList.Merge(m, src)
}
func (m *JobMonitorList) XXX_Size() int {
	return xxx_messageInfo_JobMonitorList.Size(m)
}
func (m *JobMonitorList) XXX_DiscardUnknown() {
	xxx_messageInfo_JobMonitorList.DiscardUnknown(m)
}

var xxx_messageInfo_JobMonitorList proto.InternalMessageInfo

func (m *JobMonitorList) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *JobMonitorList) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type JobException struct {
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobException) Reset()         { *m = JobException{} }
func (m *JobException) String() string { return proto.CompactTextString(m) }
func (*JobException) ProtoMessage()    {}
func (*JobException) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{9}
}

func (m *JobException) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobException.Unmarshal(m, b)
}
func (m *JobException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobException.Marshal(b, m, deterministic)
}
func (m *JobException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobException.Merge(m, src)
}
func (m *JobException) XXX_Size() int {
	return xxx_messageInfo_JobException.Size(m)
}
func (m *JobException) XXX_DiscardUnknown() {
	xxx_messageInfo_JobException.DiscardUnknown(m)
}

var xxx_messageInfo_JobException proto.InternalMessageInfo

func (m *JobException) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *JobException) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type TimingMonior struct {
	TimingId             int64    `protobuf:"varint,1,opt,name=timing_id,json=timingId,proto3" json:"timing_id,omitempty"`
	Monitor              *Monitor `protobuf:"bytes,2,opt,name=monitor,proto3" json:"monitor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimingMonior) Reset()         { *m = TimingMonior{} }
func (m *TimingMonior) String() string { return proto.CompactTextString(m) }
func (*TimingMonior) ProtoMessage()    {}
func (*TimingMonior) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{10}
}

func (m *TimingMonior) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimingMonior.Unmarshal(m, b)
}
func (m *TimingMonior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimingMonior.Marshal(b, m, deterministic)
}
func (m *TimingMonior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimingMonior.Merge(m, src)
}
func (m *TimingMonior) XXX_Size() int {
	return xxx_messageInfo_TimingMonior.Size(m)
}
func (m *TimingMonior) XXX_DiscardUnknown() {
	xxx_messageInfo_TimingMonior.DiscardUnknown(m)
}

var xxx_messageInfo_TimingMonior proto.InternalMessageInfo

func (m *TimingMonior) GetTimingId() int64 {
	if m != nil {
		return m.TimingId
	}
	return 0
}

func (m *TimingMonior) GetMonitor() *Monitor {
	if m != nil {
		return m.Monitor
	}
	return nil
}

type TimingMoniorList struct {
	TimingId             int64      `protobuf:"varint,1,opt,name=timing_id,json=timingId,proto3" json:"timing_id,omitempty"`
	Monitors             []*Monitor `protobuf:"bytes,2,rep,name=monitors,proto3" json:"monitors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TimingMoniorList) Reset()         { *m = TimingMoniorList{} }
func (m *TimingMoniorList) String() string { return proto.CompactTextString(m) }
func (*TimingMoniorList) ProtoMessage()    {}
func (*TimingMoniorList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{11}
}

func (m *TimingMoniorList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimingMoniorList.Unmarshal(m, b)
}
func (m *TimingMoniorList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimingMoniorList.Marshal(b, m, deterministic)
}
func (m *TimingMoniorList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimingMoniorList.Merge(m, src)
}
func (m *TimingMoniorList) XXX_Size() int {
	return xxx_messageInfo_TimingMoniorList.Size(m)
}
func (m *TimingMoniorList) XXX_DiscardUnknown() {
	xxx_messageInfo_TimingMoniorList.DiscardUnknown(m)
}

var xxx_messageInfo_TimingMoniorList proto.InternalMessageInfo

func (m *TimingMoniorList) GetTimingId() int64 {
	if m != nil {
		return m.TimingId
	}
	return 0
}

func (m *TimingMoniorList) GetMonitors() []*Monitor {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type TimingException struct {
	TimingId             int64    `protobuf:"varint,1,opt,name=timing_id,json=timingId,proto3" json:"timing_id,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimingException) Reset()         { *m = TimingException{} }
func (m *TimingException) String() string { return proto.CompactTextString(m) }
func (*TimingException) ProtoMessage()    {}
func (*TimingException) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{12}
}

func (m *TimingException) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimingException.Unmarshal(m, b)
}
func (m *TimingException) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimingException.Marshal(b, m, deterministic)
}
func (m *TimingException) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimingException.Merge(m, src)
}
func (m *TimingException) XXX_Size() int {
	return xxx_messageInfo_TimingException.Size(m)
}
func (m *TimingException) XXX_DiscardUnknown() {
	xxx_messageInfo_TimingException.DiscardUnknown(m)
}

var xxx_messageInfo_TimingException proto.InternalMessageInfo

func (m *TimingException) GetTimingId() int64 {
	if m != nil {
		return m.TimingId
	}
	return 0
}

func (m *TimingException) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type AppArchive struct {
	AppId                int64    `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Archive              *Archive `protobuf:"bytes,2,opt,name=archive,proto3" json:"archive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppArchive) Reset()         { *m = AppArchive{} }
func (m *AppArchive) String() string { return proto.CompactTextString(m) }
func (*AppArchive) ProtoMessage()    {}
func (*AppArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{13}
}

func (m *AppArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppArchive.Unmarshal(m, b)
}
func (m *AppArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppArchive.Marshal(b, m, deterministic)
}
func (m *AppArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppArchive.Merge(m, src)
}
func (m *AppArchive) XXX_Size() int {
	return xxx_messageInfo_AppArchive.Size(m)
}
func (m *AppArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_AppArchive.DiscardUnknown(m)
}

var xxx_messageInfo_AppArchive proto.InternalMessageInfo

func (m *AppArchive) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppArchive) GetArchive() *Archive {
	if m != nil {
		return m.Archive
	}
	return nil
}

type JobArchive struct {
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Archive              *Archive `protobuf:"bytes,2,opt,name=archive,proto3" json:"archive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobArchive) Reset()         { *m = JobArchive{} }
func (m *JobArchive) String() string { return proto.CompactTextString(m) }
func (*JobArchive) ProtoMessage()    {}
func (*JobArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{14}
}

func (m *JobArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobArchive.Unmarshal(m, b)
}
func (m *JobArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobArchive.Marshal(b, m, deterministic)
}
func (m *JobArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobArchive.Merge(m, src)
}
func (m *JobArchive) XXX_Size() int {
	return xxx_messageInfo_JobArchive.Size(m)
}
func (m *JobArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_JobArchive.DiscardUnknown(m)
}

var xxx_messageInfo_JobArchive proto.InternalMessageInfo

func (m *JobArchive) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *JobArchive) GetArchive() *Archive {
	if m != nil {
		return m.Archive
	}
	return nil
}

type TimingArchive struct {
	TimingId             int64    `protobuf:"varint,1,opt,name=timing_id,json=timingId,proto3" json:"timing_id,omitempty"`
	Archive              *Archive `protobuf:"bytes,2,opt,name=archive,proto3" json:"archive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimingArchive) Reset()         { *m = TimingArchive{} }
func (m *TimingArchive) String() string { return proto.CompactTextString(m) }
func (*TimingArchive) ProtoMessage()    {}
func (*TimingArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c348dec43a6705, []int{15}
}

func (m *TimingArchive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimingArchive.Unmarshal(m, b)
}
func (m *TimingArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimingArchive.Marshal(b, m, deterministic)
}
func (m *TimingArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimingArchive.Merge(m, src)
}
func (m *TimingArchive) XXX_Size() int {
	return xxx_messageInfo_TimingArchive.Size(m)
}
func (m *TimingArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_TimingArchive.DiscardUnknown(m)
}

var xxx_messageInfo_TimingArchive proto.InternalMessageInfo

func (m *TimingArchive) GetTimingId() int64 {
	if m != nil {
		return m.TimingId
	}
	return 0
}

func (m *TimingArchive) GetArchive() *Archive {
	if m != nil {
		return m.Archive
	}
	return nil
}

func init() {
	proto.RegisterType((*Monitor)(nil), "Monitor")
	proto.RegisterType((*Archive)(nil), "Archive")
	proto.RegisterType((*AgentMonitor)(nil), "AgentMonitor")
	proto.RegisterType((*AgentMonitorList)(nil), "AgentMonitorList")
	proto.RegisterType((*AppMonitor)(nil), "AppMonitor")
	proto.RegisterType((*AppMonitorList)(nil), "AppMonitorList")
	proto.RegisterType((*AppException)(nil), "AppException")
	proto.RegisterType((*JobMonior)(nil), "JobMonior")
	proto.RegisterType((*JobMonitorList)(nil), "JobMonitorList")
	proto.RegisterType((*JobException)(nil), "JobException")
	proto.RegisterType((*TimingMonior)(nil), "TimingMonior")
	proto.RegisterType((*TimingMoniorList)(nil), "TimingMoniorList")
	proto.RegisterType((*TimingException)(nil), "TimingException")
	proto.RegisterType((*AppArchive)(nil), "AppArchive")
	proto.RegisterType((*JobArchive)(nil), "JobArchive")
	proto.RegisterType((*TimingArchive)(nil), "TimingArchive")
}

func init() { proto.RegisterFile("master.proto", fileDescriptor_f9c348dec43a6705) }

var fileDescriptor_f9c348dec43a6705 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xa5, 0xeb, 0x47, 0x9a, 0xdb, 0x6e, 0x2b, 0x1e, 0x1b, 0x61, 0x08, 0xa9, 0x0a, 0x3c, 0x0c,
	0x84, 0xcc, 0x54, 0x3e, 0xa4, 0x3d, 0x76, 0x12, 0xa0, 0x55, 0x4c, 0xa0, 0x68, 0xbc, 0xec, 0x65,
	0x4a, 0x1a, 0xd3, 0x79, 0x22, 0xb1, 0x95, 0xb8, 0x08, 0x1e, 0xf9, 0x19, 0xfc, 0x5b, 0x54, 0xdb,
	0x49, 0xec, 0x7e, 0xac, 0x79, 0xbb, 0x3e, 0xf7, 0x9e, 0x93, 0x7b, 0x5c, 0xdf, 0xab, 0x42, 0x3f,
	0x09, 0x73, 0x41, 0x32, 0xcc, 0x33, 0x26, 0xd8, 0x31, 0x44, 0x61, 0x4e, 0x74, 0xec, 0x86, 0x9c,
	0x17, 0xe1, 0x1d, 0x8b, 0x74, 0xd8, 0x17, 0x34, 0xa1, 0xe9, 0x4c, 0x9f, 0x7a, 0xe1, 0x8c, 0xa4,
	0x42, 0x1d, 0xfc, 0x1c, 0x9c, 0x4b, 0x96, 0x52, 0xc1, 0x32, 0x84, 0xa0, 0x35, 0x9f, 0xd3, 0xd8,
	0x6b, 0x0c, 0x1b, 0x27, 0x6e, 0x20, 0x63, 0x34, 0x80, 0x26, 0xa7, 0xb1, 0xb7, 0x33, 0x6c, 0x9c,
	0xb4, 0x83, 0x45, 0xb8, 0x40, 0xa6, 0x7c, 0xee, 0x35, 0x87, 0x8d, 0x93, 0x9d, 0x60, 0x11, 0xa2,
	0x23, 0xe8, 0x24, 0x24, 0x61, 0xd9, 0x1f, 0xaf, 0x25, 0x41, 0x7d, 0x42, 0x1e, 0x38, 0xe2, 0x36,
	0x23, 0x61, 0x9c, 0x7b, 0x6d, 0xc9, 0x2f, 0x8e, 0xfe, 0xbf, 0x06, 0x38, 0xe3, 0x6c, 0x7a, 0x4b,
	0x7f, 0x91, 0x9a, 0x5f, 0x7d, 0x06, 0x10, 0x91, 0x19, 0x4d, 0x6f, 0x04, 0x4d, 0x88, 0xfc, 0x78,
	0x33, 0x70, 0x25, 0x72, 0x45, 0x13, 0x82, 0x9e, 0x40, 0x97, 0xa4, 0xb1, 0x4a, 0xb6, 0x64, 0xd2,
	0x21, 0x69, 0x2c, 0x53, 0x47, 0xd0, 0xc9, 0x45, 0x28, 0xe6, 0x45, 0x13, 0xfa, 0x24, 0x71, 0x3a,
	0x4b, 0xc3, 0x9f, 0x5e, 0x47, 0x7e, 0x59, 0x9f, 0xfc, 0x2b, 0xe8, 0x8f, 0x17, 0xf7, 0x53, 0xdc,
	0xca, 0x10, 0xda, 0xf2, 0xbe, 0x64, 0x83, 0xbd, 0x11, 0x60, 0x99, 0xbd, 0x48, 0x7f, 0xb0, 0x40,
	0x25, 0x90, 0x0f, 0x4e, 0xa2, 0x8a, 0x65, 0xc7, 0xbd, 0x51, 0x17, 0x6b, 0x72, 0x50, 0x24, 0xfc,
	0x6b, 0x18, 0x98, 0xaa, 0x5f, 0x68, 0x2e, 0x6a, 0x28, 0xbf, 0x80, 0xae, 0x16, 0xc8, 0xbd, 0x9d,
	0x61, 0xd3, 0x92, 0x2e, 0x33, 0xfe, 0x67, 0x80, 0x31, 0xe7, 0x45, 0xbf, 0x87, 0xd0, 0x09, 0x39,
	0xbf, 0xd1, 0x37, 0xda, 0x0c, 0xda, 0x21, 0xe7, 0x17, 0x71, 0xad, 0x26, 0x2f, 0x61, 0xaf, 0x12,
	0x92, 0x2d, 0x6e, 0x10, 0xab, 0xd7, 0xd7, 0x19, 0xf4, 0xc7, 0x9c, 0x7f, 0xfc, 0x3d, 0x25, 0x5c,
	0x50, 0x96, 0x6e, 0x12, 0x43, 0xd0, 0x8a, 0x49, 0x3e, 0x95, 0x6d, 0xb9, 0x81, 0x8c, 0xfd, 0x4f,
	0xe0, 0x4e, 0x58, 0xb4, 0x90, 0x54, 0x8e, 0xee, 0x58, 0x64, 0xf0, 0xee, 0x58, 0x54, 0xdf, 0x91,
	0xd6, 0x31, 0x1c, 0xad, 0x13, 0xab, 0xed, 0x68, 0xc2, 0x22, 0xcb, 0xd1, 0x3a, 0xb1, 0x75, 0x8e,
	0xbe, 0x42, 0xff, 0x4a, 0x0e, 0xa1, 0x36, 0xf5, 0x14, 0x5c, 0x35, 0x94, 0x15, 0xbb, 0xab, 0x80,
	0x9a, 0xd6, 0xbe, 0xc3, 0xc0, 0x14, 0x94, 0xe6, 0xee, 0x15, 0xad, 0x67, 0xf1, 0x1c, 0xf6, 0x95,
	0x6c, 0xe5, 0xf2, 0x5e, 0xd5, 0x75, 0x5e, 0xd5, 0x83, 0x2c, 0x06, 0x7c, 0xf3, 0x83, 0x0c, 0x55,
	0x45, 0xe9, 0x51, 0x33, 0x82, 0x22, 0xb1, 0x10, 0x9a, 0xb0, 0xc8, 0x10, 0xda, 0xf0, 0x0e, 0xb6,
	0x0a, 0x7d, 0x83, 0x5d, 0xe5, 0xaa, 0xd0, 0xda, 0x76, 0xfd, 0xdb, 0x14, 0x47, 0x7f, 0x1d, 0xe8,
	0x5c, 0xca, 0x2d, 0x8c, 0x9e, 0x43, 0x37, 0x20, 0x33, 0x2a, 0x63, 0x63, 0x88, 0x8f, 0x5d, 0x1c,
	0x90, 0x9c, 0xb3, 0x34, 0x27, 0xfe, 0x03, 0xf4, 0x12, 0x9c, 0x31, 0xe7, 0xf2, 0x57, 0x32, 0x6b,
	0x06, 0x58, 0xa3, 0x76, 0xe9, 0x84, 0x45, 0x6b, 0x4a, 0x35, 0x6a, 0x94, 0xbe, 0x01, 0x50, 0xbe,
	0x56, 0xaa, 0x0f, 0x70, 0x95, 0x30, 0x08, 0xa7, 0x80, 0xcc, 0x3d, 0x14, 0x10, 0xce, 0x32, 0x81,
	0x76, 0xb1, 0x09, 0xda, 0x8d, 0xbf, 0x86, 0x41, 0xb5, 0x14, 0x74, 0x7d, 0x0f, 0x57, 0x90, 0x5d,
	0xfd, 0x0a, 0xf6, 0xcb, 0xc1, 0xd5, 0xc5, 0x80, 0x4b, 0xc4, 0xae, 0x3d, 0x05, 0x64, 0xbe, 0xe0,
	0xb2, 0x17, 0x13, 0xb4, 0x19, 0x67, 0xf0, 0xd8, 0x6c, 0xf4, 0x3c, 0x14, 0xd3, 0x5b, 0x4d, 0x7b,
	0x88, 0x97, 0xf7, 0xab, 0x4d, 0x7d, 0x0f, 0x87, 0x55, 0xcf, 0x26, 0x71, 0x1f, 0xdb, 0x3b, 0xcf,
	0xa6, 0xbd, 0x83, 0x47, 0x65, 0xf7, 0x36, 0xcb, 0xde, 0x2b, 0x2b, 0x7d, 0x9a, 0x26, 0xec, 0x3e,
	0x97, 0xa7, 0x76, 0xdd, 0x75, 0x17, 0xcf, 0xcd, 0xb8, 0x6e, 0x0d, 0xad, 0x54, 0x57, 0x03, 0x52,
	0x56, 0x57, 0x90, 0x5d, 0x3d, 0x82, 0x03, 0x6b, 0x0a, 0x34, 0x61, 0x0f, 0x5b, 0xe8, 0xca, 0x8f,
	0x64, 0x2e, 0xf1, 0xea, 0xc1, 0x18, 0xe0, 0x0a, 0xc3, 0x5c, 0x92, 0x25, 0xc3, 0x04, 0x6d, 0xc6,
	0x07, 0x38, 0x5c, 0xda, 0x39, 0x9a, 0x34, 0xc0, 0x4b, 0xb8, 0xc5, 0x3b, 0x6f, 0x5f, 0x37, 0x33,
	0x3e, 0x8d, 0x3a, 0xf2, 0x9f, 0xcc, 0xdb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x0b, 0x94,
	0xfc, 0x16, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterClient interface {
	Register(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*Response, error)
	AppList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*AppListResponse, error)
	JobList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*JobListResponse, error)
	TimingList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*TimingListResponse, error)
	AgentMonitorReport(ctx context.Context, in *AgentMonitor, opts ...grpc.CallOption) (*Response, error)
	AppMonitorReport(ctx context.Context, in *AppMonitor, opts ...grpc.CallOption) (*Response, error)
	JobMoniorReport(ctx context.Context, in *JobMonior, opts ...grpc.CallOption) (*Response, error)
	TimingMoniorReport(ctx context.Context, in *TimingMonior, opts ...grpc.CallOption) (*Response, error)
	AgentMonitorBatchReport(ctx context.Context, in *AgentMonitorList, opts ...grpc.CallOption) (*Response, error)
	AppMonitorBatchReport(ctx context.Context, in *AppMonitorList, opts ...grpc.CallOption) (*Response, error)
	JobMoniorBatchReport(ctx context.Context, in *JobMonitorList, opts ...grpc.CallOption) (*Response, error)
	TimingMoniorBatchReport(ctx context.Context, in *TimingMoniorList, opts ...grpc.CallOption) (*Response, error)
	AppArchiveReport(ctx context.Context, in *AppArchive, opts ...grpc.CallOption) (*Response, error)
	JobArchiveReport(ctx context.Context, in *JobArchive, opts ...grpc.CallOption) (*Response, error)
	TimingArchiveReport(ctx context.Context, in *TimingArchive, opts ...grpc.CallOption) (*Response, error)
	AppExceptionReport(ctx context.Context, in *AppException, opts ...grpc.CallOption) (*Response, error)
	JobExceptionReport(ctx context.Context, in *JobException, opts ...grpc.CallOption) (*Response, error)
	TimingExceptionReport(ctx context.Context, in *TimingException, opts ...grpc.CallOption) (*Response, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Register(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AppList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*AppListResponse, error) {
	out := new(AppListResponse)
	err := c.cc.Invoke(ctx, "/Master/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, "/Master/JobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) TimingList(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*TimingListResponse, error) {
	out := new(TimingListResponse)
	err := c.cc.Invoke(ctx, "/Master/TimingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AgentMonitorReport(ctx context.Context, in *AgentMonitor, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AgentMonitorReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AppMonitorReport(ctx context.Context, in *AppMonitor, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AppMonitorReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobMoniorReport(ctx context.Context, in *JobMonior, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/JobMoniorReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) TimingMoniorReport(ctx context.Context, in *TimingMonior, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/TimingMoniorReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AgentMonitorBatchReport(ctx context.Context, in *AgentMonitorList, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AgentMonitorBatchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AppMonitorBatchReport(ctx context.Context, in *AppMonitorList, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AppMonitorBatchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobMoniorBatchReport(ctx context.Context, in *JobMonitorList, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/JobMoniorBatchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) TimingMoniorBatchReport(ctx context.Context, in *TimingMoniorList, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/TimingMoniorBatchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AppArchiveReport(ctx context.Context, in *AppArchive, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AppArchiveReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobArchiveReport(ctx context.Context, in *JobArchive, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/JobArchiveReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) TimingArchiveReport(ctx context.Context, in *TimingArchive, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/TimingArchiveReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AppExceptionReport(ctx context.Context, in *AppException, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/AppExceptionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) JobExceptionReport(ctx context.Context, in *JobException, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/JobExceptionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) TimingExceptionReport(ctx context.Context, in *TimingException, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Master/TimingExceptionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
type MasterServer interface {
	Register(context.Context, *AgentInfo) (*Response, error)
	AppList(context.Context, *AgentInfo) (*AppListResponse, error)
	JobList(context.Context, *AgentInfo) (*JobListResponse, error)
	TimingList(context.Context, *AgentInfo) (*TimingListResponse, error)
	AgentMonitorReport(context.Context, *AgentMonitor) (*Response, error)
	AppMonitorReport(context.Context, *AppMonitor) (*Response, error)
	JobMoniorReport(context.Context, *JobMonior) (*Response, error)
	TimingMoniorReport(context.Context, *TimingMonior) (*Response, error)
	AgentMonitorBatchReport(context.Context, *AgentMonitorList) (*Response, error)
	AppMonitorBatchReport(context.Context, *AppMonitorList) (*Response, error)
	JobMoniorBatchReport(context.Context, *JobMonitorList) (*Response, error)
	TimingMoniorBatchReport(context.Context, *TimingMoniorList) (*Response, error)
	AppArchiveReport(context.Context, *AppArchive) (*Response, error)
	JobArchiveReport(context.Context, *JobArchive) (*Response, error)
	TimingArchiveReport(context.Context, *TimingArchive) (*Response, error)
	AppExceptionReport(context.Context, *AppException) (*Response, error)
	JobExceptionReport(context.Context, *JobException) (*Response, error)
	TimingExceptionReport(context.Context, *TimingException) (*Response, error)
}

// UnimplementedMasterServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (*UnimplementedMasterServer) Register(ctx context.Context, req *AgentInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedMasterServer) AppList(ctx context.Context, req *AgentInfo) (*AppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (*UnimplementedMasterServer) JobList(ctx context.Context, req *AgentInfo) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobList not implemented")
}
func (*UnimplementedMasterServer) TimingList(ctx context.Context, req *AgentInfo) (*TimingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingList not implemented")
}
func (*UnimplementedMasterServer) AgentMonitorReport(ctx context.Context, req *AgentMonitor) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentMonitorReport not implemented")
}
func (*UnimplementedMasterServer) AppMonitorReport(ctx context.Context, req *AppMonitor) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMonitorReport not implemented")
}
func (*UnimplementedMasterServer) JobMoniorReport(ctx context.Context, req *JobMonior) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobMoniorReport not implemented")
}
func (*UnimplementedMasterServer) TimingMoniorReport(ctx context.Context, req *TimingMonior) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingMoniorReport not implemented")
}
func (*UnimplementedMasterServer) AgentMonitorBatchReport(ctx context.Context, req *AgentMonitorList) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentMonitorBatchReport not implemented")
}
func (*UnimplementedMasterServer) AppMonitorBatchReport(ctx context.Context, req *AppMonitorList) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMonitorBatchReport not implemented")
}
func (*UnimplementedMasterServer) JobMoniorBatchReport(ctx context.Context, req *JobMonitorList) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobMoniorBatchReport not implemented")
}
func (*UnimplementedMasterServer) TimingMoniorBatchReport(ctx context.Context, req *TimingMoniorList) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingMoniorBatchReport not implemented")
}
func (*UnimplementedMasterServer) AppArchiveReport(ctx context.Context, req *AppArchive) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppArchiveReport not implemented")
}
func (*UnimplementedMasterServer) JobArchiveReport(ctx context.Context, req *JobArchive) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobArchiveReport not implemented")
}
func (*UnimplementedMasterServer) TimingArchiveReport(ctx context.Context, req *TimingArchive) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingArchiveReport not implemented")
}
func (*UnimplementedMasterServer) AppExceptionReport(ctx context.Context, req *AppException) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppExceptionReport not implemented")
}
func (*UnimplementedMasterServer) JobExceptionReport(ctx context.Context, req *JobException) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobExceptionReport not implemented")
}
func (*UnimplementedMasterServer) TimingExceptionReport(ctx context.Context, req *TimingException) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimingExceptionReport not implemented")
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AppList(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).JobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/JobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).JobList(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_TimingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).TimingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/TimingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).TimingList(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AgentMonitorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AgentMonitorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AgentMonitorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AgentMonitorReport(ctx, req.(*AgentMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AppMonitorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppMonitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AppMonitorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AppMonitorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AppMonitorReport(ctx, req.(*AppMonitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobMoniorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMonior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).JobMoniorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/JobMoniorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).JobMoniorReport(ctx, req.(*JobMonior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_TimingMoniorReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimingMonior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).TimingMoniorReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/TimingMoniorReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).TimingMoniorReport(ctx, req.(*TimingMonior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AgentMonitorBatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentMonitorList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AgentMonitorBatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AgentMonitorBatchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AgentMonitorBatchReport(ctx, req.(*AgentMonitorList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AppMonitorBatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppMonitorList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AppMonitorBatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AppMonitorBatchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AppMonitorBatchReport(ctx, req.(*AppMonitorList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobMoniorBatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobMonitorList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).JobMoniorBatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/JobMoniorBatchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).JobMoniorBatchReport(ctx, req.(*JobMonitorList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_TimingMoniorBatchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimingMoniorList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).TimingMoniorBatchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/TimingMoniorBatchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).TimingMoniorBatchReport(ctx, req.(*TimingMoniorList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AppArchiveReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppArchive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AppArchiveReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AppArchiveReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AppArchiveReport(ctx, req.(*AppArchive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobArchiveReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobArchive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).JobArchiveReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/JobArchiveReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).JobArchiveReport(ctx, req.(*JobArchive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_TimingArchiveReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimingArchive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).TimingArchiveReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/TimingArchiveReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).TimingArchiveReport(ctx, req.(*TimingArchive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AppExceptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppException)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AppExceptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/AppExceptionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AppExceptionReport(ctx, req.(*AppException))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_JobExceptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobException)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).JobExceptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/JobExceptionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).JobExceptionReport(ctx, req.(*JobException))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_TimingExceptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimingException)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).TimingExceptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Master/TimingExceptionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).TimingExceptionReport(ctx, req.(*TimingException))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _Master_AppList_Handler,
		},
		{
			MethodName: "JobList",
			Handler:    _Master_JobList_Handler,
		},
		{
			MethodName: "TimingList",
			Handler:    _Master_TimingList_Handler,
		},
		{
			MethodName: "AgentMonitorReport",
			Handler:    _Master_AgentMonitorReport_Handler,
		},
		{
			MethodName: "AppMonitorReport",
			Handler:    _Master_AppMonitorReport_Handler,
		},
		{
			MethodName: "JobMoniorReport",
			Handler:    _Master_JobMoniorReport_Handler,
		},
		{
			MethodName: "TimingMoniorReport",
			Handler:    _Master_TimingMoniorReport_Handler,
		},
		{
			MethodName: "AgentMonitorBatchReport",
			Handler:    _Master_AgentMonitorBatchReport_Handler,
		},
		{
			MethodName: "AppMonitorBatchReport",
			Handler:    _Master_AppMonitorBatchReport_Handler,
		},
		{
			MethodName: "JobMoniorBatchReport",
			Handler:    _Master_JobMoniorBatchReport_Handler,
		},
		{
			MethodName: "TimingMoniorBatchReport",
			Handler:    _Master_TimingMoniorBatchReport_Handler,
		},
		{
			MethodName: "AppArchiveReport",
			Handler:    _Master_AppArchiveReport_Handler,
		},
		{
			MethodName: "JobArchiveReport",
			Handler:    _Master_JobArchiveReport_Handler,
		},
		{
			MethodName: "TimingArchiveReport",
			Handler:    _Master_TimingArchiveReport_Handler,
		},
		{
			MethodName: "AppExceptionReport",
			Handler:    _Master_AppExceptionReport_Handler,
		},
		{
			MethodName: "JobExceptionReport",
			Handler:    _Master_JobExceptionReport_Handler,
		},
		{
			MethodName: "TimingExceptionReport",
			Handler:    _Master_TimingExceptionReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}
